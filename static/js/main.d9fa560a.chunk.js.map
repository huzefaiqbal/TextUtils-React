{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","aboutText","Alert","alert","typ","word","lower","charAt","slice","captalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d9fa560a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link> */}\r\n            </li>\r\n          </ul>\r\n          \r\n        </div>\r\n        <div className={`form-check form-switch text-${props.mode === 'light'? 'dark':'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpChange = () => {\r\n    // console.log(\"UpperCase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to upper case\", \"success\");\r\n  };\r\n\r\n  const handleLoChange = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lower case\", \"success\");\r\n  };\r\n\r\n  const handleClearText = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\" \");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h3>{props.heading}</h3>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\"\r\n            }}\r\n            rows=\"8\"\r\n            value={text}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpChange}>\r\n          Convert To UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoChange}>\r\n          Convert To LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearText}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-5\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h3>Your Text Summary</h3>\r\n        <p>\r\n          {text.split(\" \").length} Words and {text.length} Characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n        <h3> Preview</h3>\r\n        <p>{text.length>0? text : \"Enter something in the above text area to preview it here.\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const captalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1); \r\n\r\n    }\r\n  return (\r\n    props.alert && (\r\n      <div className={`alert alert-${props.alert.typ} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{captalize(props.alert.typ)}</strong> : {props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route, } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      typ: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\"\n      // setTimeout(() => {\n      //   document.title = \"Install TextUtils\";\n      // }, 2000);\n      // setTimeout(() => {\n      //   document.title = \"TextUtils\"\n      // }, 1500);\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\"\n    }\n  };\n  return (\n<>\n{/* <Router> */}\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n<Alert alert={alert} />\n<div className=\"container my-3\">\n  {/* <Switch> */}\n    {/* <Route exact path=\"/about\">\n      <About />\n    </Route> */}\n    {/* <Route exact path=\"/\"> */}\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n    {/* </Route> */}\n  {/* </Switch> */}\n</div>\n{/* </Router> */}\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}